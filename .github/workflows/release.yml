name: Release

on:
  release:
    types:
      - created

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # https://doc.rust-lang.org/rustc/platform-support.html
        include:
          - host: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            label: windows-x86_64

    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    env:
      BIN: remodel
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Build Release
        run: cargo build --release --locked --verbose
        env:
          # Build into a known directory so we can find our build artifact more
          # easily.
          CARGO_TARGET_DIR: output

          # On platforms that use OpenSSL, ensure it is statically linked to
          # make binaries more portable.
          OPENSSL_STATIC: 1

      - name: Create Release Archive
        shell: bash
        run: |
          mkdir staging

          if [ "${{ matrix.host }}" = "windows" ]; then
            cp "output/release/$BIN.exe" staging/
            cd staging
            7z a ../release.zip *
          else
            cp "output/release/$BIN" staging/
            cd staging
            zip ../release.zip *
          fi

      - name: Upload Archive to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:  ${{ github.event.release.upload_url }}
          asset_path: release.zip
          asset_name: 0.12.0-${{ matrix.label }}.zip
          asset_content_type: application/octet-stream

      - name: Upload Archive to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: 0.12.0-${{ matrix.label }}.zip
          path: release.zip
